name: Deploy to GitHub Pages via Actions

on:
  push:
    paths:
      - '**/*.html'
      - '**/*.css'
      - '**/*.js'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - '**/*.txt'
      - '**/*.pdf'
      # Note: Removed *.chopro and *.cho to prevent race condition
      # ChordPro changes will trigger auto-generate-pdfs.yml which commits PDFs
      # and those PDF commits will trigger this deployment workflow
      - '**/*.mscz'
      - '**/*.urltxt'
      - '**/*.hide'
      - '**/*.easy'
      - 'robots.txt'
    branches: [ main, master ]
  repository_dispatch:
    types: [deploy-pages]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy all files'
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  FORCE_COLOR: 1

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for git timestamp lookups
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Install Python dependencies for GenList.py
      run: |
        python -m pip install --upgrade pip
        pip install first
    
    - name: Generate ukulele-song-archive.html
      run: |
        echo "Running GenList.py from root directory to generate ukulele-song-archive.html..."
        python music/scripts/GenList.py music ukulele-song-archive.html --intro --no-genPDF
        echo "Generated ukulele-song-archive.html"
        ls -la ukulele-song-archive.html || echo "Archive file not found"
    
    - name: Generate unfiltered ukulele-song-archive-unfiltered.html
      run: |
        echo "Running GenList.py to generate unfiltered archive..."
        python music/scripts/GenList.py music ukulele-song-archive-unfiltered.html --intro --no-genPDF --filter=none
        echo "Generated ukulele-song-archive-unfiltered.html"
        ls -la ukulele-song-archive-unfiltered.html || echo "Unfiltered archive file not found"
    
    - name: Prepare site files
      run: |
        # Create a temporary directory for the site
        mkdir -p _site
        
        # Copy all files except .git and .github
        find . -maxdepth 1 -not -name '.' -not -name '_site' -not -name '.git' -not -name '.github' -exec cp -r {} _site/ \;
        
        # Verify key files
        echo "üìÅ Site files prepared:"
        echo "HTML files:"
        ls -la _site/*.html | head -5 || echo "No HTML files found"
        echo "Archive file:"
        ls -la _site/ukulele-song-archive.html || echo "Archive file missing"
        echo "PDF count:"
        find _site -name "*.pdf" -type f | wc -l
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
