name: Generate ChordPro PDFs

on:
  push:
    paths:
      - '**/*.chopro'
      - '**/*.cho'
      - 'music/ChordPro/myconfig.json'
  pull_request:
    paths:
      - '**/*.chopro'
      - '**/*.cho'
      - 'music/ChordPro/myconfig.json'
  workflow_dispatch:
    inputs:
      regenerate_all:
        description: 'Regenerate all PDFs (ignore timestamps)'
        required: false
        default: false
        type: boolean

jobs:
  generate-pdfs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history to detect all changed files
    
    - name: Install ChordPro
      run: |
        # Install ChordPro from CPAN
        sudo apt-get update
        sudo apt-get install -y cpanminus build-essential
        sudo cpanm --notest App::Music::ChordPro
        
        # Verify installation
        chordpro --version
    
    - name: Get changed ChordPro files
      id: changed-files
      run: |
        # Get list of changed .chopro and .cho files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PR, compare against base branch
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(chopro|cho)$' || true)
        else
          # For push, compare against previous commit
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(chopro|cho)$' || true)
          else
            # First commit, process all ChordPro files
            CHANGED_FILES=$(find . -name "*.chopro" -o -name "*.cho" | sed 's|^\./||')
          fi
        fi
        
        # If myconfig.json changed, regenerate all PDFs
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "music/ChordPro/myconfig.json"; then
          echo "myconfig.json changed, regenerating all PDFs"
          CHANGED_FILES=$(find . -name "*.chopro" -o -name "*.cho" | sed 's|^\./||')
        fi
        
        echo "Changed ChordPro files:"
        echo "$CHANGED_FILES"
        
        # Save to output and file for next step
        echo "$CHANGED_FILES" > changed_files.txt
        echo "files-changed=$(echo "$CHANGED_FILES" | wc -l)" >> $GITHUB_OUTPUT
    
    - name: Generate PDFs
      if: steps.changed-files.outputs.files-changed > 0
      run: |
        # Read the changed files
        CHANGED_FILES=$(cat changed_files.txt)
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "No ChordPro files to process"
          exit 0
        fi
        
        # ChordPro settings based on GenList.py configuration
        CHORDPRO_ARGS=(
          "--config=music/ChordPro/myconfig.json"
          "--define=pdf:diagrams:show=top"
          "--define=settings:inline-chords=true"
          "--define=pdf:margintop=70"
          "--define=pdf:marginbottom=0"
          "--define=pdf:marginleft=20"
          "--define=pdf:marginright=20"
          "--define=pdf:headspace=50"
          "--define=pdf:footspace=10"
          "--define=pdf:head-first-only=true"
          "--define=pdf:fonts:chord:color=red"
          "--text-font=helvetica"
          "--chord-font=helvetica"
        )
        
        # Process each changed file
        echo "$CHANGED_FILES" | while IFS= read -r file; do
          if [ -n "$file" ] && [ -f "$file" ]; then
            echo "Processing: $file"
            
            # Generate output PDF path (same directory, same name, .pdf extension)
            pdf_file="${file%.*}.pdf"
            
            # Create directory if it doesn't exist
            mkdir -p "$(dirname "$pdf_file")"
            
            # Generate PDF
            if chordpro "${CHORDPRO_ARGS[@]}" --output="$pdf_file" "$file"; then
              echo "✓ Generated: $pdf_file"
            else
              echo "✗ Failed to generate: $pdf_file"
              exit 1
            fi
          fi
        done
    
    - name: Check for PDF changes
      id: pdf-changes
      run: |
        # Check if any PDFs were created or modified
        if git status --porcelain | grep -E '\.pdf$'; then
          echo "pdf-changes=true" >> $GITHUB_OUTPUT
          echo "PDF files were generated or modified:"
          git status --porcelain | grep -E '\.pdf$'
        else
          echo "pdf-changes=false" >> $GITHUB_OUTPUT
          echo "No PDF changes detected"
        fi
    
    - name: Upload PDFs as artifacts
      if: steps.pdf-changes.outputs.pdf-changes == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: generated-pdfs-${{ github.run_number }}
        path: |
          **/*.pdf
        retention-days: 30
    
    - name: Summary
      run: |
        PROCESSED_COUNT=$(cat changed_files.txt | wc -l)
        echo "## PDF Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Files processed:** $PROCESSED_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **PDFs generated:** $(git status --porcelain | grep -E '\.pdf$' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -s changed_files.txt ]; then
          echo "### Processed files:" >> $GITHUB_STEP_SUMMARY
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "- \`$file\`" >> "$GITHUB_STEP_SUMMARY"
            fi
          done < changed_files.txt
        fi
